/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as FooResponseValidator } from './schemas/foo-response.schema.js'

/**
 * HttpError
 *
 * The default error error response for both 400 & 500 type errors
 */
export interface ErrorResponse {
    /**
     * A detailed message of the error.
     */
    message: string
    /**
     * The status code of the response.
     */
    statusCode: number
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface FooData {
    message: string
}

/**
 * FooResponse
 */
export interface FooResponse {
    data: FooData
}

export const FooResponse = {
    validate: FooResponseValidator as ValidateFunction<FooResponse>,
    get schema() {
        return FooResponse.validate.schema
    },
    get errors() {
        return FooResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is FooResponse => FooResponse.validate(o) === true,
    parse: (o: unknown): { right: FooResponse } | { left: DefinedError[] } => {
        if (FooResponse.is(o)) {
            return { right: o }
        }
        return { left: (FooResponse.errors ?? []) as DefinedError[] }
    },
} as const
