{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StarChartHandler",
  "type": "object",
  "description": "The definition of a Star Chart handler.",
  "properties": {
    "handler": {
      "type": "string",
      "description": "The name of the handler function to invoke.",
      "default": "index.handler"
    },
    "functionId": {
      "type": "string",
      "description": "The ID of the function. Defaults to the name of the folder."
    },
    "functionName": {
      "type": "string",
      "description": "The name of the function. Defaults to the function ID."
    },
    "environment": {
      "type": "object",
      "description": "The environment variables to set for the handler.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "warmer": {
      "type": "object",
      "description": "The warmer to use to keep the handler warm. Defaults to enabled, rate: 10 minutes.",
      "properties": {
        "ruleName": {
          "type": "string",
          "description": "The name to give the scheduled rule. Defaults to prefixing the name of the handler."
        },
        "ruleNamePrefix": {
          "type": "string",
          "description": "The prefix to give the scheduled rule. Defaults to the name of the handler."
        },
        "description": {
          "type": "string",
          "description": "The description to give the scheduled rule."
        },
        "rate": {
          "type": "string",
          "description": "The rate at which to invoke the handler. Must be a valid rate expression. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html for more information."
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule should be enabled. Defaults to true."
        },
        "input": {
          "description": "The input to pass to the handler. Defaults to an empty object. Conflicts with inputPath and inputTransformer"
        },
        "inputPath": {
          "type": "string",
          "description": "The JSONPath to use to extract the input to pass to the handler. Conflicts with input and inputTransformer."
        },
        "inputTransformer": {
          "type": "object",
          "description": "The input transformer to use to transform the input to pass to the handler. Conflicts with input and inputPath. See https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-transform-target-input.html for more information.",
          "properties": {
            "inputPaths": {
              "type": "object",
              "description": "The JSONPaths to use to extract the input to pass to the handler.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "inputTemplate": {
              "type": "string",
              "description": "The template to use to transform the input to pass to the handler."
            }
          },
          "required": ["inputTemplate"],
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    },
    "events": {
      "$ref": "#/$defs/Events"
    },
    "publishes": {
      "$ref": "#/$defs/Publishes"
    },
    "resources": {
      "$ref": "#/$defs/Resources"
    },
    "inlinePolicies": {
      "type": "array",
      "items": {}
    },
    "runtime": {
      "enum": ["nodejs18.x", "nodejs20.x", "python3.8", "python3.9", "python3.10"]
    },
    "memorySize": {
      "type": "number"
    },
    "timeout": {
      "type": "number"
    },
    "vpcConfig": {
      "type": "string"
    },
    "authorizer": {
      "type": "object",
      "description": "Define that this lambda defines an authorizer.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the authorizer to use for the route."
        },
        "securityScheme": {
          "description": "The security schemes to use for the route.",
          "$ref": "#/$defs/SecurityScheme"
        }
      },
      "required": ["name"],
      "additionalProperties": true
    }
  },
  "additionalProperties": true,
  "$defs": {
    "Events": {
      "type": "array",
      "description": "The events that will trigger the handler.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/HttpTrigger"
          },
          {
            "$ref": "#/$defs/SqsTrigger"
          },
          {
            "$ref": "#/$defs/ScheduledTrigger"
          }
        ]
      }
    },
    "HttpTrigger": {
      "type": "object",
      "properties": {
        "http": {
          "type": "object",
          "description": "Subscribes to an HTTP route.",
          "properties": {
            "method": {
              "enum": ["get", "post", "put", "delete", "patch", "options", "head"]
            },
            "path": {
              "type": "string",
              "description": "The HTTP path for the route. Must start with / and must not end with /."
            },
            "authorizer": {
              "type": "object",
              "description": "The authorizer to use for the route, this overrides the default authorizer.",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the authorizer to use for the route."
                },
                "scopes": {
                  "type": "array",
                  "description": "The scopes to use for the authorizer.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["name"],
              "additionalProperties": true
            },
            "monitoring": {
              "description": "The monitoring configuration for the route.",
              "$ref": "#/$defs/ApigatewayMonitoringMetric"
            }
          },
          "required": ["method", "path"],
          "additionalProperties": true
        }
      },
      "required": ["http"],
      "additionalProperties": true
    },
    "ApigatewayMonitoringMetric": {
      "type": "object",
      "properties": {
        "latency": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "integrationLatency": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "5xx": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "4xx": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "dataProcessed": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "count": {
          "$ref": "#/$defs/DefaultMetric"
        }
      },
      "additionalProperties": true
    },
    "DefaultMetric": {
      "type": "object",
      "properties": {
        "static": {
          "type": "object",
          "properties": {
            "average": {
              "$ref": "#/$defs/StaticMetric"
            },
            "sum": {
              "$ref": "#/$defs/StaticMetric"
            },
            "minimum": {
              "$ref": "#/$defs/StaticMetric"
            },
            "maximum": {
              "$ref": "#/$defs/StaticMetric"
            },
            "sampleCount": {
              "$ref": "#/$defs/StaticMetric"
            },
            "iqm": {
              "$ref": "#/$defs/StaticMetric"
            },
            "p80": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tm80": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tc80": {
              "$ref": "#/$defs/StaticMetric"
            },
            "wm80": {
              "$ref": "#/$defs/StaticMetric"
            },
            "p90": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tm90": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tc90": {
              "$ref": "#/$defs/StaticMetric"
            },
            "wm90": {
              "$ref": "#/$defs/StaticMetric"
            },
            "p95": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tm95": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tc95": {
              "$ref": "#/$defs/StaticMetric"
            },
            "wm95": {
              "$ref": "#/$defs/StaticMetric"
            },
            "p99": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tm99": {
              "$ref": "#/$defs/StaticMetric"
            },
            "tc99": {
              "$ref": "#/$defs/StaticMetric"
            },
            "wm99": {
              "$ref": "#/$defs/StaticMetric"
            }
          },
          "additionalProperties": true
        },
        "anomaly": {
          "type": "object",
          "properties": {
            "average": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "sum": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "minimum": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "maximum": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "sampleCount": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "iqm": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "p80": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tm80": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tc80": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "wm80": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "p90": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tm90": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tc90": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "wm90": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "p95": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tm95": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tc95": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "wm95": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "p99": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tm99": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "tc99": {
              "$ref": "#/$defs/AnomalyMetric"
            },
            "wm99": {
              "$ref": "#/$defs/AnomalyMetric"
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    },
    "StaticMetric": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "threshold": {
          "type": "number"
        },
        "period": {
          "type": "number"
        },
        "evaluationPeriods": {
          "type": "number"
        }
      },
      "additionalProperties": true
    },
    "AnomalyMetric": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "evaluationPeriods": {
          "type": "number"
        },
        "datapointsToAlarm": {
          "type": "number"
        },
        "bandWidthStandardDeviations": {
          "type": "number"
        },
        "metricPeriod": {
          "type": "number"
        }
      },
      "additionalProperties": true
    },
    "SqsTrigger": {
      "type": "object",
      "properties": {
        "sqs": {
          "type": "object",
          "description": "Subscribes to an SQS queue.",
          "properties": {
            "queueId": {
              "type": "string",
              "description": "The ID of the SQS queue to subscribe to."
            },
            "batchSize": {
              "type": "number",
              "description": "The maximum number of messages to retrieve from the queue at once. Default is 1."
            },
            "fifo": {
              "$ref": "#/$defs/FifoSettings"
            },
            "dlq": {
              "$ref": "#/$defs/DlqSettings"
            },
            "visibilityTimeoutSeconds": {
              "type": "number",
              "description": "The visibility timeout of the queue."
            },
            "messageRetentionPeriodSeconds": {
              "type": "number",
              "description": "The message retention period of the queue."
            },
            "kmsMasterKeyId": {
              "type": "string",
              "description": "The ID of the KMS key to use to decrypt messages."
            },
            "maxMessageSize": {
              "type": "number",
              "description": "The maximum message size of the queue."
            },
            "delaySeconds": {
              "type": "number",
              "description": "The delay of the queue."
            },
            "receiveWaitTimeSeconds": {
              "type": "number",
              "description": "The receive wait time of the queue."
            },
            "policy": {
              "type": "string",
              "description": "The policy of the queue."
            },
            "kmsDataKeyReusePeriodSeconds": {
              "type": "number",
              "description": "The data key reuse period of the queue."
            },
            "tags": {
              "type": "object",
              "description": "The tags to apply to the queue.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "eventbridge": {
              "$ref": "#/$defs/EventbridgeSettings"
            },
            "monitoring": {
              "$ref": "#/$defs/SqsMonitoring"
            }
          },
          "required": ["queueId"],
          "additionalProperties": true
        }
      },
      "required": ["sqs"],
      "additionalProperties": true
    },
    "FifoSettings": {
      "type": "object",
      "description": "The FIFO settings to use when retrieving messages from the queue.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to enable FIFO queue support. Default is false."
        },
        "contentBasedDeduplication": {
          "type": "boolean",
          "description": "Whether to enable content-based deduplication. Default is false.",
          "default": true
        },
        "deduplicationScope": {
          "description": "The scope of the deduplication. Default is queue.",
          "default": "queue",
          "enum": ["messageGroup", "queue"]
        },
        "throughputLimit": {
          "description": "The throughput limit of the queue. Default is perQueue.",
          "default": "perQueue",
          "enum": ["perQueue", "perMessageGroupId"]
        }
      },
      "additionalProperties": true
    },
    "DlqSettings": {
      "type": "object",
      "description": "The dead-letter queue settings to use when messages are not processed.",
      "properties": {
        "suffix": {
          "type": "string",
          "description": "The suffix to append to the queue name to create the DLQ."
        },
        "maxReceiveCount": {
          "type": "number",
          "description": "The maximum number of times to receive a message."
        },
        "redriveEnabled": {
          "type": "boolean",
          "description": "Whether to enable the redrive policy."
        },
        "visibilityTimeoutSeconds": {
          "type": "number",
          "description": "The visibility timeout of the DLQ."
        },
        "messageRetentionPeriodSeconds": {
          "type": "number",
          "description": "The message retention period of the DLQ."
        },
        "delaySeconds": {
          "type": "number",
          "description": "The delay of the DLQ."
        },
        "receiveWaitTimeSeconds": {
          "type": "number",
          "description": "The receive wait time of the DLQ."
        },
        "policy": {
          "type": "string",
          "description": "The policy of the DLQ."
        }
      },
      "additionalProperties": true
    },
    "EventbridgeSettings": {
      "description": "The EventBridge event bus to subscribe to.",
      "allOf": [
        {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "eventBusId": {
                  "type": "string",
                  "description": "The name of the event bus to subscribe to."
                }
              },
              "required": ["eventBusId"],
              "additionalProperties": true
            },
            {
              "type": "object",
              "properties": {
                "eventBusName": {
                  "type": "string",
                  "description": "The name of the event bus to subscribe to."
                }
              },
              "required": ["eventBusName"],
              "additionalProperties": true
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "eventPattern": {
              "type": "object",
              "description": "The event pattern to filter on.",
              "properties": {
                "detail-type": {
                  "type": "array",
                  "description": "The detail type of the event.",
                  "items": {}
                }
              },
              "additionalProperties": true
            }
          },
          "required": ["eventPattern"],
          "additionalProperties": true
        }
      ]
    },
    "SqsMonitoring": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/$defs/SqsMonitoringMetric"
        },
        "dlq": {
          "$ref": "#/$defs/SqsMonitoringMetric"
        }
      },
      "additionalProperties": true
    },
    "SqsMonitoringMetric": {
      "type": "object",
      "properties": {
        "numberOfMessagesSent": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "approximateNumberOfMessagesVisible": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "approximateNumberOfMessagesDelayed": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "approximateAgeOfOldestMessage": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "approximateNumberOfMessagesNotVisible": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "numberOfMessagesDeleted": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "numberOfMessagesReceived": {
          "$ref": "#/$defs/DefaultMetric"
        },
        "numberOfEmptyReceives": {
          "$ref": "#/$defs/DefaultMetric"
        }
      },
      "additionalProperties": true
    },
    "ScheduledTrigger": {
      "type": "object",
      "properties": {
        "schedule": {
          "type": "object",
          "description": "Subscribes to a scheduled event.",
          "properties": {
            "ruleName": {
              "type": "string",
              "description": "The name to give the scheduled rule. Defaults to prefixing the name of the handler."
            },
            "ruleNamePrefix": {
              "type": "string",
              "description": "The prefix to give the scheduled rule. Defaults to the name of the handler."
            },
            "description": {
              "type": "string",
              "description": "The description to give the scheduled rule."
            },
            "rate": {
              "type": "string",
              "description": "The rate at which to invoke the handler. Must be a valid rate expression. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html for more information."
            },
            "enabled": {
              "type": "boolean",
              "description": "Whether the rule should be enabled. Defaults to true."
            },
            "input": {
              "description": "The input to pass to the handler. Defaults to an empty object. Conflicts with inputPath and inputTransformer"
            },
            "inputPath": {
              "type": "string",
              "description": "The JSONPath to use to extract the input to pass to the handler. Conflicts with input and inputTransformer."
            },
            "inputTransformer": {
              "type": "object",
              "description": "The input transformer to use to transform the input to pass to the handler. Conflicts with input and inputPath. See https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-transform-target-input.html for more information.",
              "properties": {
                "inputPaths": {
                  "type": "object",
                  "description": "The JSONPaths to use to extract the input to pass to the handler.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "inputTemplate": {
                  "type": "string",
                  "description": "The template to use to transform the input to pass to the handler."
                }
              },
              "required": ["inputTemplate"],
              "additionalProperties": true
            }
          },
          "required": ["rate"],
          "additionalProperties": true
        }
      },
      "required": ["schedule"],
      "additionalProperties": true
    },
    "Publishes": {
      "type": "array",
      "description": "The events that the handler may publish.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/PublishEventbridge"
          },
          {
            "$ref": "#/$defs/PublishSqs"
          }
        ]
      }
    },
    "PublishEventbridge": {
      "type": "object",
      "properties": {
        "eventbridge": {
          "type": "object",
          "description": "Publishes an event to an EventBridge event bus.",
          "properties": {
            "eventBusId": {
              "type": "string",
              "description": "The name of the event bus to publish to."
            },
            "detailType": {
              "description": "The detail type of the event.",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          "required": ["detailType", "eventBusId"],
          "additionalProperties": true
        }
      },
      "required": ["eventbridge"],
      "additionalProperties": true
    },
    "PublishSqs": {
      "type": "object",
      "description": "Publishes an event to an SQS queue.",
      "properties": {
        "sqs": {
          "type": "object",
          "properties": {
            "queueId": {
              "type": "string",
              "description": "The ID of the SQS queue to publish to."
            }
          },
          "required": ["queueId"],
          "additionalProperties": true
        }
      },
      "required": ["sqs"],
      "additionalProperties": true
    },
    "Resources": {
      "type": "array",
      "description": "The resources that the function will use.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/DynamodbResource"
          },
          {
            "$ref": "#/$defs/SecretResource"
          },
          {
            "$ref": "#/$defs/ParameterResource"
          },
          {
            "$ref": "#/$defs/S3Resource"
          },
          {
            "$ref": "#/$defs/CustomResource"
          }
        ]
      }
    },
    "DynamodbResource": {
      "type": "object",
      "description": "A DynamoDB table that is used by the function.",
      "properties": {
        "dynamodb": {
          "type": "object",
          "description": "A DynamoDB table that is used by the function.",
          "properties": {
            "tableId": {
              "type": "string",
              "description": "The ID of the table."
            },
            "actions": {
              "type": "array",
              "description": "The actions to allow on the table.",
              "items": {
                "enum": ["read", "write", "scan", "delete", "put", "update", "get", "query"]
              },
              "minItems": 1
            },
            "iamActions": {
              "type": "array",
              "description": "Custom IAM actions to add to the role.",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["actions", "tableId"],
          "additionalProperties": true
        }
      },
      "required": ["dynamodb"],
      "additionalProperties": true
    },
    "SecretResource": {
      "type": "object",
      "description": "A secret that is used by the function.",
      "properties": {
        "secret": {
          "anyOf": [
            {
              "type": "string",
              "description": "The path to the secret."
            },
            {
              "type": "object",
              "description": "A secret that is used by the function.",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The path to the secret."
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "enum": ["read", "rotation"]
                  },
                  "minItems": 1
                }
              },
              "required": ["actions", "path"],
              "additionalProperties": true
            }
          ]
        }
      },
      "required": ["secret"],
      "additionalProperties": true
    },
    "ParameterResource": {
      "type": "object",
      "description": "An SSM parameter that is used by the function.",
      "properties": {
        "parameter": {
          "anyOf": [
            {
              "type": "string",
              "description": "The path to the SSM parameter."
            },
            {
              "type": "object",
              "description": "An SSM parameter that is used by the function.",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The path to the SSM parameter."
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "const": "read"
                  },
                  "minItems": 1
                }
              },
              "required": ["actions", "path"],
              "additionalProperties": true
            }
          ]
        }
      },
      "required": ["parameter"],
      "additionalProperties": true
    },
    "S3Resource": {
      "type": "object",
      "description": "An S3 bucket that is used by the function.",
      "properties": {
        "s3": {
          "type": "object",
          "description": "An S3 bucket that is used by the function.",
          "properties": {
            "bucketId": {
              "type": "string",
              "description": "The ID of the bucket."
            },
            "actions": {
              "type": "array",
              "items": {
                "enum": ["read", "write", "delete", "get", "list"]
              },
              "minItems": 1
            },
            "iamActions": {
              "type": "array",
              "description": "Custom IAM actions to add to the role.",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["actions", "bucketId"],
          "additionalProperties": true
        }
      },
      "required": ["s3"],
      "additionalProperties": true
    },
    "CustomResource": {
      "type": "object",
      "description": "A custom resource that is used by the function.",
      "properties": {
        "custom": {
          "type": "object",
          "description": "A custom resource that is used by the function.",
          "properties": {
            "arn": {
              "description": "The ARN of the custom resource.",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "iamActions": {
              "type": "array",
              "description": "Custom IAM actions to add to the role.",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["arn", "iamActions"],
          "additionalProperties": true
        }
      },
      "required": ["custom"],
      "additionalProperties": true
    },
    "SecurityScheme": {
      "anyOf": [
        {
          "$ref": "#/$defs/ApiKeySecurityScheme"
        },
        {
          "$ref": "#/$defs/HttpSecurityScheme"
        },
        {
          "$ref": "#/$defs/Oauth2SecurityScheme"
        },
        {
          "$ref": "#/$defs/OpenIdConnectSecurityScheme"
        }
      ]
    },
    "ApiKeySecurityScheme": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the security scheme.",
          "const": "apiKey"
        },
        "description": {
          "type": "string",
          "description": "The description of the security scheme."
        },
        "name": {
          "type": "string",
          "description": "The name of the API key."
        },
        "in": {
          "description": "The location of the API key.",
          "enum": ["query", "header", "cookie"]
        }
      },
      "required": ["in", "name", "type"],
      "additionalProperties": true
    },
    "HttpSecurityScheme": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the security scheme.",
          "const": "http"
        },
        "description": {
          "type": "string",
          "description": "The description of the security scheme."
        },
        "scheme": {
          "type": "string",
          "description": "The name of the HTTP Authorization scheme to be used."
        },
        "bearerFormat": {
          "type": "string",
          "description": "A hint to the client to identify how the bearer token is formatted."
        }
      },
      "required": ["scheme", "type"],
      "additionalProperties": true
    },
    "Oauth2SecurityScheme": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the security scheme.",
          "const": "oauth2"
        },
        "description": {
          "type": "string",
          "description": "The description of the security scheme."
        },
        "flows": {
          "type": "object",
          "description": "The available flows for the OAuth2 security scheme.",
          "properties": {
            "implicit": {
              "type": "object",
              "properties": {
                "authorizationUrl": {
                  "type": "string",
                  "description": "The authorization URL to be used for this flow."
                },
                "refreshUrl": {
                  "type": "string",
                  "description": "The URL to be used for obtaining refresh tokens."
                },
                "scopes": {
                  "type": "object",
                  "description": "The available scopes for the OAuth2 security scheme.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["authorizationUrl", "scopes"],
              "additionalProperties": true
            },
            "password": {
              "type": "object",
              "properties": {
                "tokenUrl": {
                  "type": "string",
                  "description": "The token URL to be used for this flow."
                },
                "refreshUrl": {
                  "type": "string",
                  "description": "The URL to be used for obtaining refresh tokens."
                },
                "scopes": {
                  "type": "object",
                  "description": "The available scopes for the OAuth2 security scheme.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["scopes", "tokenUrl"],
              "additionalProperties": true
            },
            "clientCredentials": {
              "type": "object",
              "properties": {
                "tokenUrl": {
                  "type": "string",
                  "description": "The token URL to be used for this flow."
                },
                "refreshUrl": {
                  "type": "string",
                  "description": "The URL to be used for obtaining refresh tokens."
                },
                "scopes": {
                  "type": "object",
                  "description": "The available scopes for the OAuth2 security scheme.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["scopes", "tokenUrl"],
              "additionalProperties": true
            },
            "authorizationCode": {
              "type": "object",
              "properties": {
                "authorizationUrl": {
                  "type": "string",
                  "description": "The authorization URL to be used for this flow."
                },
                "tokenUrl": {
                  "type": "string",
                  "description": "The token URL to be used for this flow."
                },
                "refreshUrl": {
                  "type": "string",
                  "description": "The URL to be used for obtaining refresh tokens."
                },
                "scopes": {
                  "type": "object",
                  "description": "The available scopes for the OAuth2 security scheme.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["authorizationUrl", "scopes", "tokenUrl"],
              "additionalProperties": true
            }
          },
          "additionalProperties": true
        }
      },
      "required": ["type"],
      "additionalProperties": true
    },
    "OpenIdConnectSecurityScheme": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the security scheme.",
          "const": "openIdConnect"
        },
        "description": {
          "type": "string",
          "description": "The description of the security scheme."
        },
        "openIdConnectUrl": {
          "type": "string",
          "description": "The OpenID Connect URL to discover OAuth2 configuration values."
        }
      },
      "required": ["openIdConnectUrl", "type"],
      "additionalProperties": true
    }
  }
}
